{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "3. SliceFinder can handle percentile metrics (no subfactor decomposition) while Metric Analyzer\n\ncannot.\n\nMetric Analyzer vs SliceFinder comparison table:\n\nMetric Analyzer\n\nSliceFinder\n\nLattice search\n\nTheoretical\n\nSnapshot\n\nYes\n\nYes\n\nTime series delta\n\nYes\n\nYes\n\nPercentile metric\n\nNo\n\nYes\n\nOverlap Slices\n\nDisjoint (most granular)\n\nOverlap\n\nEmpirical (speed/interpreta bility)\n\nRaw data\n\nNo\n\nYes\n\nRange of degrees\n\nFixed degree each time, depends on available agg_level\n\nMultiple degrees, up to 3 for practical runtime\n\nSearch space\n\nDepends on available agg_level\n\nAll combinations\n\nInterpretability\n\nDepends\n\nGood\n\nFurther Reading\n\nDivExplorer\n\nSimilar to the original SliceFinder, DivExplorer was intended as a model fairness evaluation tool. In contrast to SliceFinder\u2019s algorithm, DivExplorer uses frequent pattern mining (FPgrowth and apriori) to find interesting slices within data. As a result, DivExplorer uses slice minimum size (minimum support in frequent pattern mining) instead of slice maximum degree as the search stop condition. Therefore, DivExplorer is able to find \u201cdeep\u201d (high degree) and frequent (high size) slices. In addition, DivExplorer decomposes each slice by its filtering conditions. For example, for slice \u201ccountry: US, gender: M, platform: Android\u201d, DivExplorer is able to find country, gender and platform\u2019s contribution to that slice\u2019s deviation from the global baseline using Shapley scores. DivExplorer\u2019s unique slice searching algorithm and contribution decomposition make it a potentially useful alternative to SliceFinder in snapshot tasks.\n\nCausal Trees", "metadata": {"source": "./documents/Roblox/Josh Wang Internship at Roblox Report.pdf"}, "type": "Document"}}