{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "Initial Results and the Problem:\n\nInitially I used SliceFinder directly on Engine\u2019s session_tracking table (Fct_client_session_tracking (ds = 2023-06-24)) to root-cause device crashing. This table reports each play session\u2019s device information and the outcome of each session (success or inferred crashing).\n\nFigure 3. Top panel, crash rate by free memory. Bottom panel, crash rate by passmark score (a benchmark score of devices. Higher passmark scores mean more powerful devices). The size of each bubble is the size of the slice. We can see that the lower the free memory or the passmark score, the higher the inferred crash rate.\n\nSliceFinder returned \u201cdevice: Android\u201d, \u201cfree_os_mem: < 0.314\u201d and \u201cpassmark_score: < 1344\u201d. While the snapshot results make sense (Figure 3.), they are well-understood knowledge and do not provide any new and actionable information for the engineering team. On the other hand, if we use SliceFinder as a monitoring tool and root-cause the target metric changes, SliceFinder may be able to surface top moving slices that provide more useful insights. Therefore, I implement time series handling, along with many other powerful new features to the original SliceFinder.\n\nAdded features:\n\nGreatly improved parallel processing:\n\nThe original SliceFinder had an attempt at multithreading, however, it was highly inefficient: each task contained only one slice, and because the processing time of one slice is extremely fast, the overhead from creating and managing workers greatly outweighs the benefits of multi- threading. Instead of assigning one slice to each worker, I assign a batch of slices to each worker. This significantly reduced the overhead of repeated worker initialization and termination (Figure 4).\n\nFigure 4. Runtime analysis of SliceFinder vs number of workers. Blue line is the original implementation of multithreading, orange is the improved multithreading.\n\nVisualization:", "metadata": {"source": "./documents/Roblox/Project 1_ SliceFinder Final Writeup.pdf"}, "type": "Document"}}