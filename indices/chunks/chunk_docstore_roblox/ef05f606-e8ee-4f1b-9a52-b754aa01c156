{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "Data Quality Explainer, an extension of SliceFinder\n\nAt Roblox, data quality remains a problem. This is especially true for Engine, where many data pipelines were newly established. This inspired me to modify SliceFinder into Data Quality Explainer to help troubleshoot data quality issues. Data Quality Explainer works by accepting a target column\u2019s missing or invalid values as the target (e.g. country: NaN or datacenterid: -1), and then it uses SliceFinder\u2019s algorithm to find slices where the invalid entries are overrepresented. Data Quality Explainer provides insights to explain data quality problems, and has already demonstrated its efficacy in a recent use case. You can try out Data Quality Explainer yourself here.\n\nSliceFinder User Interface\n\nSliceFinder has one unified interface for both time series and snapshot tasks, for both aggregated data and raw data, and for all four types of target metric (sum, ratio, average, percentile). On GitHub, the user can follow a detailed flowchart to find the correct config setup (Figure 9). After setting up the config, the user can run SliceFinder in one line:\n\n# config: dictionary containing parameters\n\n# reference_df: data from first timestamp in time series tasks. Set to None\n\nfor snapshot tasks\n\n# reference_df: data from second timestamp in time series tasks.\n\nresult_df = run_delta(config, reference_df, compared_df)\n\nFigure 9. SliceFinder config setup flow.\n\nSliceFinder successful use cases\n\nThanks to Roblox\u2019s collaborative culture, I was able to comprehensively test SliceFinder in several cross-functional collaborations. With each of the following cases I was able to further improve the functionalities of SliceFinder. I thank all my stakeholders.\n\nJoin time regression case:\n\nw/ Vijay Balaji Full write-up link\n\nThis case helped me test a raw-data task with an average-type metric. \u25cf Vijay noticed a regression in global join time in April and May. Can this regression be root-caused using SliceFinder?", "metadata": {"source": "./documents/Roblox/Project 1_ SliceFinder Final Writeup.pdf"}, "type": "Document"}}