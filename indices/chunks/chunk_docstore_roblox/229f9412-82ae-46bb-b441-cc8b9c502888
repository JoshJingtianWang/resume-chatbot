{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "\u2039#\u203a\n\n\u2039#\u203a\n\nTarget Metric Decomposition\n\nPlay time in a slice = slice size * slice average playtime\n\nLog transform\n\nE.g. Slice (country = \u2018US\u2019) contributed 5%\n\nSlice size contributed 3%\n\nSlice average playtime contributed 2%\n\n\u2039#\u203a\n\n\u2039#\u203a\n\nPercentile Metric Handling\n\nE.g. P90 join time\n\nNo more additive / multiplicative relationship to global!\n\nFind contribution by finding the counterfactual:\n\nSimulated Case: \n\nP90 join time increased from 265ms to 415ms\n\nWeek 1 join time distribution\n\nWeek 2 join time distribution\n\n\u2039#\u203a\n\n\u2039#\u203a\n\nPercentile Metric Handling\n\nE.g. P90 join time\n\nTarget slice contribution:\n\nWeek 1 join time distribution\n\nWeek 1 target slice replaced with Week 2 target slice data\n\n\u2039#\u203a\n\n\u2039#\u203a\n\nAggregated data handling\n\nSlice Finder is intended for raw data (user level, play session level\u2026)\n\nIt can handle aggregated data in two ways:\n\nGet upstream fct tables\n\nRolling up slice-level metric if a \u201cweight\u201d column is provided (assume metric is summable)\n\nCase: Growth team DAU/MAU\n\nThe data table is aggregated.\n\nDAU/MAU increased from 0.33 in summer 2022 to 0.34 in summer 2023.\n\nWhat are the key drivers?\n\n\u2039#\u203a\n\n\u2039#\u203a\n\nDAU/MAU case\n\nGrowth team pre-aggregated table:\n\nCountry    Gender    Platform    DAU    MAU\nUS         M         Android     1000   5000\nUS         F         iOS         1200   5500\nCAN        F         iOS         300    1000\n\u2026          \u2026         \u2026           \u2026      \u2026\n\nDAU and MAU are the \u201cweight\u201d columns that help roll up data to a coarser agg_level\n\nE.g. Slice (Country = \u2018US\u2019) DAU = 1000 + 1200, MAU = 5000 + 5500\n\nCaveat: assuming no overlap in segments\n\nWe then follow the time series handling steps to find contribution of each slice.\n\n\u2039#\u203a\n\n\u2039#\u203a\n\nDAU/MAU case\n\nDAU = DAU/MAU * MAU\n\ndecompose\n\nPlatform slices:\n\n%contribution DAU/MAU\n\n%contribution MAU\n\n\u2039#\u203a\n\n\u2039#\u203a\n\nDAU/MAU case\n\nAutomatically looks at all other combinations\u2026\n\nCountry + age_group slices:\n\nTotal runtime ~ 30 seconds (10 workers)\n\n\u2039#\u203a\n\n\u2039#\u203a\n\nOther Use Cases\n\nA vs B:", "metadata": {"source": "./documents/Roblox/SliceFinder (BYOL Presentation).pptx"}, "type": "Document"}}