{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "Args: p1 (float): Probability of success for population 1. num_simulations (int): Number of simulations to estimate power. num_samples (int, optional): Number of samples for bootstrapping. Defaults to 1000. metric (str, optional): The name of the metric used for the test. Defaults to 'accuracy'. seed (Optional[int], optional): Random seed for reproducibility. Defaults to None. \"\"\" self.p1 = p1 self.n1 = 1 self.n2 = 1 self.num_simulations = num_simulations self.num_samples = num_samples self.metric = metric self.seed = seed\n\ndef generate_binomial_data(self, p2: float, size: int, j) -> Tuple[np.ndarray, np.ndarray]: \"\"\" Generate binomial data for the two populations.\n\nArgs: p2 (float): Probability of success for population 2. size (int): Size of the original populations.\n\nReturns: Tuple[np.ndarray, np.ndarray]: A tuple containing two NumPy arrays with binomial data for each population. \"\"\"\n\nif self.seed is not None: np.random.seed(self.seed + j) data1 = np.random.binomial(self.n1, self.p1, size)\n\nif self.seed is not None: np.random.seed(self.seed + j + 1) data2 = np.random.binomial(self.n2, p2, size)\n\nreturn np.sort(data1), np.sort(data2)\n\ndef bootstrap_accuracy_scores(self, data: np.ndarray, j: int) -> np.ndarray: \"\"\" Calculate bootstrapped accuracy scores (means) for the given data.\n\nArgs: data (np.ndarray): A NumPy array containing the original data. j (int): Index of the current simulation, used to adjust the random seed.\n\nReturns: np.ndarray: A NumPy array containing bootstrapped accuracy scores. \"\"\" bootstrapped_means = [] for i in range(self.num_samples): if self.seed is not None: np.random.seed(self.seed + i * (j+1)) # bootstrap_indices = np.random.choice(np.arange(len(data)), len(data), replace=True) # bootstrapped_sample = data[bootstrap_indices] bootstrapped_sample = np.random.choice(data, len(data), replace=True) bootstrapped_means.append(np.mean(bootstrapped_sample))\n\nreturn np.array(bootstrapped_means)", "metadata": {"source": "./documents/IFF/power_simulation.py"}, "type": "Document"}}