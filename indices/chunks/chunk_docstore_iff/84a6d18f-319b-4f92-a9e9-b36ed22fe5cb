{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "Args: deltas (List[float]): A list of differences between p1 and p2. data_size (int): Size of the original populations. alpha (float, optional): Significance level. Defaults to 0.05.\n\nReturns: List[Dict[str, Union[int, float]]]: A list of dictionaries containing data size, p2 value, and power. \"\"\" p2_space = [self.p1 + delta for delta in deltas] results = []\n\nfor p2 in p2_space: power = self.simulate_power(p2, data_size, alpha) results.append({\"test_size\": data_size, \"new_model_score\": p2, \"power\": power})\n\nreturn results\n\ndef multiple_delta_size_run(self, deltas: List[float], size_space: np.ndarray = np.arange(10, 1001, 10), num_processes: int = 10) -> pd.DataFrame: \"\"\" Run power simulations in parallel and return the results as a Pandas DataFrame. This is for plotting.\n\nArgs: deltas (List[float]): A list of differences between p1 and p2. size_space (np.ndarray, optional): A NumPy array containing the sizes of the original populations. Defaults to np.arange(10, 1001, 10). num_processes (int, optional): Number of processes to use for parallelization. Defaults to 20.\n\nReturns: pd.DataFrame: A Pandas DataFrame containing data size, p2 value, and power. \"\"\"\n\n# multiprocess with Pool(num_processes) as pool: # Map the function to the inputs using the pool of processes results = pool.starmap(self.multiple_delta_run, [(deltas, size) for size in size_space])\n\n##single process # results = [] # for size in size_space: #     results.extend(self.multiple_delta_run(deltas, size))\n\nresults = [item for sublist in results for item in sublist] results_df = pd.DataFrame(results) # Add the rounded_new_model_score column because small rounding errors when adding floats can result in imprecise numbers (e.g. 0.950000000000001) results_df['rounded_new_model_score'] = results_df['new_model_score'].round(2)\n\nreturn pd.DataFrame(results_df)", "metadata": {"source": "./documents/IFF/power_simulation.py"}, "type": "Document"}}