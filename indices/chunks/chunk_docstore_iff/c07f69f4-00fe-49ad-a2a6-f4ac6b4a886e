{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "if self.one_sided:\n\nalternative = 'greater'\n\nelse:\n\nalternative = 'two\n\nsided'\n\nt_stat, p_val = stats.ttest_ind(new_model_scores, old_model_scores, alternative = alternative)\n\nif p_val >= self.alpha: print('There is no significant difference between the two models.') elif self.one_sided: print('Model 1 accuracy is significantly higher than Model 2\\'s.') else: print('Model 1 accuracy is significantly different from Model 2\\'s.')\n\nprint(f't statistic: {t_stat}')\n\nprint(f'p value: {p_val}')\n\nreturn t_stat, p_val\n\ndef run(self, new_model: Union[ClassifierMixin, RegressorMixin], old_model: Union[ClassifierMixin, RegressorMixin], x_test: Union[np.ndarray, pd.DataFrame], y_test: Union[np.ndarray, pd.Series]) -> Tuple[float, float]: \"\"\" Runs the ModelCompare process, including the bootstrap test and t-test, and returns the t-statistic and p-value.\n\nArgs: new_model (Union[ClassifierMixin, RegressorMixin]): The first model to compare. old_model (Union[ClassifierMixin, RegressorMixin]): The second model to compare. x_test (Union[np.ndarray, pd.DataFrame]): The test data features. y_test (Union[np.ndarray, pd.Series]): The test data target values.\n\nReturns:\n\nTuple[float, float]: The t\n\nstatistic and p\n\nvalue, respectively.\n\n\"\"\"\n\nif not isinstance(new_model, (ClassifierMixin, RegressorMixin)): raise TypeError('Invalid new_model type. Must be a classifier or a regressor.') if not isinstance(old_model, (ClassifierMixin, RegressorMixin)): raise TypeError('Invalid old_model type. Must be a classifier or a regressor.') if not isinstance(x_test, (np.ndarray, pd.DataFrame)): raise TypeError('Invalid input type for x_test. Must be a numpy array or pandas dataframe.') if not isinstance(y_test, (np.ndarray, pd.Series)): raise TypeError('Invalid input type for y_test. Must be a numpy array or pandas Series.') if x_test.shape[0] != len(y_test): raise ValueError(\"x_test and y_test have incompatible shapes. They must have the same number of rows.\")\n\nlogging.info('Running ModelCompare.')", "metadata": {"source": "./documents/IFF/model_compare.py"}, "type": "Document"}}