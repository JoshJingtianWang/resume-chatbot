{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "Args: fixed_attributes (dict): A dictionary containing the fixed attributes (p2, size, alpha, and power). target (str): The attribute to be generated. One of \"p2\", \"size\", \"alpha\", or \"power\".\n\nReturns: Union[float, int]: The generated value of the target attribute. \"\"\" if target == \"p2\": p2_space = np.linspace(0, 1, 100) for p2 in p2_space: power = self.simulate_power(p2, fixed_attributes[\"size\"], fixed_attributes[\"alpha\"]) if power >= fixed_attributes[\"power\"]: print(f\"New model needs to have an {self.metric} score of at least {p2} to meet your specifications.\") return p2 elif target == \"size\": size_space = np.arange(10, 1001, 10) for size in size_space: power = self.simulate_power(fixed_attributes[\"p2\"], size, fixed_attributes[\"alpha\"]) if power >= fixed_attributes[\"power\"]: print(f\"Test data size needs to be at least {size} to meet your specifications.\") return size elif target == \"alpha\": alpha_space = np.linspace(0, 0.5, 100) for alpha in alpha_space: power = self.simulate_power(fixed_attributes[\"p2\"], fixed_attributes[\"size\"], alpha) if power >= fixed_attributes[\"power\"]: print(f\"The alpha value needs to be at least {alpha} to meet your specifications.\") return alpha elif target == \"power\": power = self.simulate_power(fixed_attributes[\"p2\"], fixed_attributes[\"size\"], fixed_attributes[\"alpha\"]) print(f\"The power given your provided specifications is {power}.\") return power else: raise ValueError(\"Invalid target attribute.\")\n\ndef multiple_delta_run(self, deltas: List[float], data_size: int, alpha: float = 0.05) -> List[Dict[str, Union[int, float]]]: \"\"\" Simulate power for a single data size and a list of and return the results. This is for plotting.\n\nArgs: deltas (List[float]): A list of differences between p1 and p2. data_size (int): Size of the original populations. alpha (float, optional): Significance level. Defaults to 0.05.", "metadata": {"source": "./documents/IFF/power_simulation.py"}, "type": "Document"}}