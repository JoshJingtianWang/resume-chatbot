{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "evaluation_metric = evaluation_metrics[self.evaluation_metric]\n\nnew_model_scores = []\n\nold_model_scores = []\n\nbootstrap_size = int(self.bootstrap_percent\n\nlen(x_test))\n\nfor i in tqdm(range(self.bootstrap_num_iter)): # Take a random sample with replacement from the data if self.seed: np.random.seed(self.seed + i) #set seed for reproducibility if isinstance(x_test, np.ndarray): # Bootstrap using numpy random choice bootstrap = np.random.choice bootstrap_indices = bootstrap(np.arange(x_test.shape[0]), bootstrap_size, replace=True) elif isinstance(x_test, pd.DataFrame): bootstrap = pd.DataFrame.sample bootstrap_indices = bootstrap(x_test, bootstrap_size, replace=True).index x_test_bootstrap = x_test.iloc[bootstrap_indices] if isinstance(x_test, pd.DataFrame) else x_test[bootstrap_indices] y_test_bootstrap = y_test[bootstrap_indices] new_model_pred = new_model.predict(x_test_bootstrap) old_model_pred = old_model.predict(x_test_bootstrap) new_model_scores.append(evaluation_metric(y_test_bootstrap, new_model_pred)) old_model_scores.append(evaluation_metric(y_test_bootstrap, old_model_pred))\n\nreturn new_model_scores, old_model_scores\n\ndef t_test(self, new_model_scores: List[float], old_model_scores: List[float]) -> Tuple[float, float]: \"\"\" Performs a t-test on the bootstrap performance scores of the two models, returning the t-statistic and p-value.\n\nArgs: new_model_scores (List[float]): The list of performance scores for the first model. old_model_scores (List[float]): The list of performance scores for the second model.\n\nReturns:\n\nTuple[float, float]: The t\n\nstatistic and p\n\nvalue, respectively.\n\n\"\"\"\n\nlogging.debug('Running t_test.')\n\nif self.one_sided:\n\nalternative = 'greater'\n\nelse:\n\nalternative = 'two\n\nsided'\n\nt_stat, p_val = stats.ttest_ind(new_model_scores, old_model_scores, alternative = alternative)", "metadata": {"source": "./documents/IFF/model_compare.py"}, "type": "Document"}}