{"lc": 1, "type": "constructor", "id": ["langchain", "schema", "document", "Document"], "kwargs": {"page_content": "geom_vline(aes(xintercept = mean(profit), color = \"mean\"),\n\nlinetype = \"dashed\") + geom_vline(aes(xintercept = median(profit),\n\ncolor = \"median\"), linetype = \"dashed\") + geom_vline(aes(xintercept = mean(profit, trim = 0.1), color = \"trimmed mean\"), linetype = \"dashed\") + scale_color_manual(name = \"metrics\", values = c(\"blue\", \"orange\",\n\n\"red\")) + facet_wrap(~season) + theme_light() + xlab(\"Profit/ad ($)\")\n\nmeanmediantrimmed mean\n\nmetrics\n\nwinter\n\nfall\n\n02550020406080\n\n02550\n\nProfit/ad ($)count\n\nsummer\n\n020406080\n\nspring\n\n# one plot per season add table with mean trim mean vals\n\ncreate_season_histogram <- function(season) {\n\ndata <- ads[ads$season == season, ]\n\n# Determine optimal number of bins n <- nrow(data) k <- ceiling(log2(n)) + 1\n\nprofit_median <- median(data$profit) profit_mean <- mean(data$profit) profit_trimmed <- mean(data$profit, trim = 0.1)\n\n# Create and return histogram\n\n6\n\nhistogram <- ggplot(data, aes(x = profit)) + geom_histogram(binwidth = k) +\n\ngeom_vline(aes(xintercept = mean(profit), color = \"mean\"),\n\nlinetype = \"dashed\") + geom_vline(aes(xintercept = median(profit),\n\ncolor = \"median\"), linetype = \"dashed\") + geom_vline(aes(xintercept = mean(profit, trim = 0.1), color = \"trimmed mean\"), linetype = \"dashed\") + scale_color_manual(name = \"metrics\", values = c(\"blue\",\n\n\"orange\", \"red\")) + theme_light() + ggtitle(paste(\"Histogram for\",\n\nseason)) + xlab(\"Profit/ad ($)\") + annotate(\"text\", x = 40, y = 40, label = bquote(tilde(x) == .(profit_median)), color = \"orange\", angle = 0) + annotate(\"text\", x = 40, y = 45, label = bquote(bar(x)[10] == .(profit_trimmed)), color = \"red\", angle = 0) + annotate(\"text\", x = 40, y = 50, label = bquote(bar(x) == .(profit_mean)), color = \"blue\", angle = 0) + theme_classic()\n\nreturn(histogram)\n\n}\n\nspring_histogram <- create_season_histogram(\"spring\") spring_histogram\n\n## Warning in is.na(x): is.na() applied to non-(list or vector) of type \u2019language\u2019", "metadata": {"source": "./documents/University of Rochester/computational intro to stats final project report.pdf"}, "type": "Document"}}